//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#nullable enable

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."
#pragma warning disable 8073 // Disable "CS8073 The result of the expression is always 'false' since a value of type 'T' is never equal to 'null' of type 'T?'"
#pragma warning disable 3016 // Disable "CS3016 Arrays as attribute arguments is not CLS-compliant"
#pragma warning disable 8603 // Disable "CS8603 Possible null reference return"

namespace PetStore {
 using Microsoft.AspNetCore.Mvc;
 using System = global::System;

 [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 public interface IController {

  /// <summary>
  /// Add a new pet to the store
  /// </summary>

  /// <remarks>
  /// Add new pet to the store inventory.
  /// </remarks>

  /// <param name="cookieParam">Some cookie</param>


  /// <param name="accept_Language">The language you prefer for messages. Supported values are en-AU, en-CA, en-GB, en-US</param>

  System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> AddPetAsync(long cookieParam, object? body = null, string accept_Language, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

  /// <summary>
  /// Update an existing pet
  /// </summary>

  /// <param name="cookieParam">Some cookie</param>


  /// <param name="accept_Language">The language you prefer for messages. Supported values are en-AU, en-CA, en-GB, en-US</param>

  System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> UpdatePetAsync(long cookieParam, object? body = null, string accept_Language, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

  /// <summary>
  /// Find pet by ID
  /// </summary>

  /// <remarks>
  /// Returns a single pet
  /// </remarks>

  /// <param name="petId">ID of pet to return</param>

  /// <returns>successful operation</returns>

  System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Pet>> GetPetByIdAsync(long petId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

  /// <summary>
  /// Updates a pet in the store with form data
  /// </summary>

  /// <param name="petId">ID of pet that needs to be updated</param>


  System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> UpdatePetWithFormAsync(long petId, Body? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

  /// <summary>
  /// Deletes a pet
  /// </summary>

  /// <param name="petId">Pet id to delete</param>


  System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeletePetAsync(long petId, string? api_key = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

  /// <summary>
  /// uploads an image
  /// </summary>

  /// <param name="petId">ID of pet to update</param>


  /// <returns>successful operation</returns>

  System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<ApiResponse>> UploadFileAsync(long petId, Microsoft.AspNetCore.Http.IFormFile body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

  /// <summary>
  /// Finds Pets by status
  /// </summary>

  /// <remarks>
  /// Multiple status values can be provided with comma separated strings
  /// </remarks>

  /// <param name="status">Status values that need to be considered for filter</param>

  /// <returns>successful operation</returns>

  System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<Pet>>> FindPetsByStatusAsync(System.Collections.Generic.IEnumerable<Anonymous> status, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

  /// <summary>
  /// Finds Pets by tags
  /// </summary>

  /// <remarks>
  /// Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
  /// </remarks>

  /// <param name="tags">Tags to filter by</param>

  /// <returns>successful operation</returns>

  [System.Obsolete]

  System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<Pet>>> FindPetsByTagsAsync(System.Collections.Generic.IEnumerable<string> tags, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

  /// <summary>
  /// Returns pet inventories by status
  /// </summary>

  /// <remarks>
  /// Returns a map of status codes to quantities
  /// </remarks>

  /// <returns>successful operation</returns>

  System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.IDictionary<string, int>>> GetInventoryAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

  /// <summary>
  /// Place an order for a pet
  /// </summary>

  /// <param name="body">order placed for purchasing the pet</param>

  /// <returns>successful operation</returns>

  System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Order>> PlaceOrderAsync(Order body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

  /// <summary>
  /// Find purchase order by ID
  /// </summary>

  /// <remarks>
  /// For valid response try integer IDs with value &lt;= 5 or &gt; 10. Other values will generated exceptions
  /// </remarks>

  /// <param name="orderId">ID of pet that needs to be fetched</param>

  /// <returns>successful operation</returns>

  System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Order>> GetOrderByIdAsync(long orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

  /// <summary>
  /// Delete purchase order by ID
  /// </summary>

  /// <remarks>
  /// For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
  /// </remarks>

  /// <param name="orderId">ID of the order that needs to be deleted</param>

  System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteOrderAsync(string orderId, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

  /// <summary>
  /// Subscribe to the Store events
  /// </summary>

  /// <remarks>
  /// Add subscription for a store events
  /// </remarks>

  /// <returns>Subscription added</returns>

  System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Response>> SubscribeAsync(Body2? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

  /// <summary>
  /// Create user
  /// </summary>

  /// <remarks>
  /// This can only be done by the logged in user.
  /// </remarks>

  /// <param name="body">Created user object</param>

  /// <returns>successful operation</returns>

  System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> CreateUserAsync(User body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

  /// <summary>
  /// Get user by user name
  /// </summary>

  /// <param name="username">The name that needs to be fetched. Use user1 for testing.</param>

  /// <returns>successful operation</returns>

  System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<User>> GetUserByNameAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

  /// <summary>
  /// Updated user
  /// </summary>

  /// <remarks>
  /// This can only be done by the logged in user.
  /// </remarks>

  /// <param name="username">name that need to be deleted</param>

  /// <param name="body">Updated user object</param>

  System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> UpdateUserAsync(string username, User body, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

  /// <summary>
  /// Delete user
  /// </summary>

  /// <remarks>
  /// This can only be done by the logged in user.
  /// </remarks>

  /// <param name="username">The name that needs to be deleted</param>

  System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteUserAsync(string username, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

  /// <summary>
  /// Creates list of users with given input array
  /// </summary>


  /// <returns>successful operation</returns>

  System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> CreateUsersWithArrayInputAsync(object? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

  /// <summary>
  /// Creates list of users with given input array
  /// </summary>


  /// <returns>successful operation</returns>

  System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> CreateUsersWithListInputAsync(object? body = null, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

  /// <summary>
  /// Logs user into the system
  /// </summary>

  /// <param name="username">The user name for login</param>

  /// <param name="password">The password for login in clear text</param>

  /// <returns>successful operation</returns>

  System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> LoginUserAsync(string username, string password, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

  /// <summary>
  /// Logs out current logged in user session
  /// </summary>

  /// <returns>successful operation</returns>

  System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> LogoutUserAsync(System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

 }

 [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 [Microsoft.AspNetCore.Mvc.Route("petstore.swagger.io/v2")]

 public partial class Controller : ControllerBase {
  private IController _implementation;

  public Controller(IController implementation) {
   _implementation = implementation;
  }

  /// <summary>
  /// Add a new pet to the store
  /// </summary>
  /// <remarks>
  /// Add new pet to the store inventory.
  /// </remarks>
  /// <param name="cookieParam">Some cookie</param>
  /// <param name="accept_Language">The language you prefer for messages. Supported values are en-AU, en-CA, en-GB, en-US</param>
  [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("pet")]
  public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> AddPet([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] long cookieParam, [Microsoft.AspNetCore.Mvc.FromBody] object? body = null, [Microsoft.AspNetCore.Mvc.FromHeader(Name = "Accept-Language")] string? accept_Language = null, System.Threading.CancellationToken cancellationToken) {

   return _implementation.AddPetAsync(cookieParam, body, accept_Language ?? "en-AU", cancellationToken);
  }

  /// <summary>
  /// Update an existing pet
  /// </summary>
  /// <param name="cookieParam">Some cookie</param>
  /// <param name="accept_Language">The language you prefer for messages. Supported values are en-AU, en-CA, en-GB, en-US</param>
  [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("pet")]
  public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> UpdatePet([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] long cookieParam, [Microsoft.AspNetCore.Mvc.FromBody] object? body = null, [Microsoft.AspNetCore.Mvc.FromHeader(Name = "Accept-Language")] string? accept_Language = null, System.Threading.CancellationToken cancellationToken) {

   return _implementation.UpdatePetAsync(cookieParam, body, accept_Language ?? "en-AU", cancellationToken);
  }

  /// <summary>
  /// Find pet by ID
  /// </summary>
  /// <remarks>
  /// Returns a single pet
  /// </remarks>
  /// <param name="petId">ID of pet to return</param>
  /// <returns>successful operation</returns>
  [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("pet/{petId}")]
  public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Pet>> GetPetById([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] long petId, System.Threading.CancellationToken cancellationToken) {

   return _implementation.GetPetByIdAsync(petId, cancellationToken);
  }

  /// <summary>
  /// Updates a pet in the store with form data
  /// </summary>
  /// <param name="petId">ID of pet that needs to be updated</param>
  [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("pet/{petId}")]
  public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> UpdatePetWithForm([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] long petId, [Microsoft.AspNetCore.Mvc.FromBody] Body? body = null, System.Threading.CancellationToken cancellationToken) {

   return _implementation.UpdatePetWithFormAsync(petId, body, cancellationToken);
  }

  /// <summary>
  /// Deletes a pet
  /// </summary>
  /// <param name="petId">Pet id to delete</param>
  [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("pet/{petId}")]
  public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeletePet([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] long petId, [Microsoft.AspNetCore.Mvc.FromHeader] string? api_key = null, System.Threading.CancellationToken cancellationToken) {

   return _implementation.DeletePetAsync(petId, api_key, cancellationToken);
  }

  /// <summary>
  /// uploads an image
  /// </summary>
  /// <param name="petId">ID of pet to update</param>
  /// <returns>successful operation</returns>
  [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("pet/{petId}/uploadImage")]
  public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<ApiResponse>> UploadFile([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] long petId, Microsoft.AspNetCore.Http.IFormFile body = null, System.Threading.CancellationToken cancellationToken) {

   return _implementation.UploadFileAsync(petId, body, cancellationToken);
  }

  /// <summary>
  /// Finds Pets by status
  /// </summary>
  /// <remarks>
  /// Multiple status values can be provided with comma separated strings
  /// </remarks>
  /// <param name="status">Status values that need to be considered for filter</param>
  /// <returns>successful operation</returns>
  [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("pet/findByStatus")]
  public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<Pet>>> FindPetsByStatus([Microsoft.AspNetCore.Mvc.FromQuery][Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] System.Collections.Generic.IEnumerable<Anonymous> status, System.Threading.CancellationToken cancellationToken) {

   return _implementation.FindPetsByStatusAsync(status, cancellationToken);
  }

  /// <summary>
  /// Finds Pets by tags
  /// </summary>
  /// <remarks>
  /// Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
  /// </remarks>
  /// <param name="tags">Tags to filter by</param>
  /// <returns>successful operation</returns>
  [System.Obsolete]
  [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("pet/findByTags")]
  public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.ICollection<Pet>>> FindPetsByTags([Microsoft.AspNetCore.Mvc.FromQuery][Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] System.Collections.Generic.IEnumerable<string> tags, System.Threading.CancellationToken cancellationToken) {

   return _implementation.FindPetsByTagsAsync(tags, cancellationToken);
  }

  /// <summary>
  /// Returns pet inventories by status
  /// </summary>
  /// <remarks>
  /// Returns a map of status codes to quantities
  /// </remarks>
  /// <returns>successful operation</returns>
  [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("store/inventory")]
  public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<System.Collections.Generic.IDictionary<string, int>>> GetInventory(System.Threading.CancellationToken cancellationToken) {

   return _implementation.GetInventoryAsync(cancellationToken);
  }

  /// <summary>
  /// Place an order for a pet
  /// </summary>
  /// <param name="body">order placed for purchasing the pet</param>
  /// <returns>successful operation</returns>
  [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("store/order")]
  public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Order>> PlaceOrder([Microsoft.AspNetCore.Mvc.FromBody][Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] Order body, System.Threading.CancellationToken cancellationToken) {

   return _implementation.PlaceOrderAsync(body, cancellationToken);
  }

  /// <summary>
  /// Find purchase order by ID
  /// </summary>
  /// <remarks>
  /// For valid response try integer IDs with value &lt;= 5 or &gt; 10. Other values will generated exceptions
  /// </remarks>
  /// <param name="orderId">ID of pet that needs to be fetched</param>
  /// <returns>successful operation</returns>
  [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("store/order/{orderId}")]
  public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Order>> GetOrderById([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] long orderId, System.Threading.CancellationToken cancellationToken) {

   return _implementation.GetOrderByIdAsync(orderId, cancellationToken);
  }

  /// <summary>
  /// Delete purchase order by ID
  /// </summary>
  /// <remarks>
  /// For valid response try integer IDs with value &lt; 1000. Anything above 1000 or nonintegers will generate API errors
  /// </remarks>
  /// <param name="orderId">ID of the order that needs to be deleted</param>
  [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("store/order/{orderId}")]
  public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteOrder([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string orderId, System.Threading.CancellationToken cancellationToken) {

   return _implementation.DeleteOrderAsync(orderId, cancellationToken);
  }

  /// <summary>
  /// Subscribe to the Store events
  /// </summary>
  /// <remarks>
  /// Add subscription for a store events
  /// </remarks>
  /// <returns>Subscription added</returns>
  [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("store/subscribe")]
  public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<Response>> Subscribe([Microsoft.AspNetCore.Mvc.FromBody] Body2? body = null, System.Threading.CancellationToken cancellationToken) {

   return _implementation.SubscribeAsync(body, cancellationToken);
  }

  /// <summary>
  /// Create user
  /// </summary>
  /// <remarks>
  /// This can only be done by the logged in user.
  /// </remarks>
  /// <param name="body">Created user object</param>
  /// <returns>successful operation</returns>
  [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("user")]
  public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> CreateUser([Microsoft.AspNetCore.Mvc.FromBody][Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] User body, System.Threading.CancellationToken cancellationToken) {

   return _implementation.CreateUserAsync(body, cancellationToken);
  }

  /// <summary>
  /// Get user by user name
  /// </summary>
  /// <param name="username">The name that needs to be fetched. Use user1 for testing.</param>
  /// <returns>successful operation</returns>
  [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("user/{username}")]
  public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<User>> GetUserByName([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string username, System.Threading.CancellationToken cancellationToken) {

   return _implementation.GetUserByNameAsync(username, cancellationToken);
  }

  /// <summary>
  /// Updated user
  /// </summary>
  /// <remarks>
  /// This can only be done by the logged in user.
  /// </remarks>
  /// <param name="username">name that need to be deleted</param>
  /// <param name="body">Updated user object</param>
  [Microsoft.AspNetCore.Mvc.HttpPut, Microsoft.AspNetCore.Mvc.Route("user/{username}")]
  public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> UpdateUser([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string username, [Microsoft.AspNetCore.Mvc.FromBody][Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] User body, System.Threading.CancellationToken cancellationToken) {

   return _implementation.UpdateUserAsync(username, body, cancellationToken);
  }

  /// <summary>
  /// Delete user
  /// </summary>
  /// <remarks>
  /// This can only be done by the logged in user.
  /// </remarks>
  /// <param name="username">The name that needs to be deleted</param>
  [Microsoft.AspNetCore.Mvc.HttpDelete, Microsoft.AspNetCore.Mvc.Route("user/{username}")]
  public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> DeleteUser([Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string username, System.Threading.CancellationToken cancellationToken) {

   return _implementation.DeleteUserAsync(username, cancellationToken);
  }

  /// <summary>
  /// Creates list of users with given input array
  /// </summary>
  /// <returns>successful operation</returns>
  [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("user/createWithArray")]
  public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> CreateUsersWithArrayInput([Microsoft.AspNetCore.Mvc.FromBody] object? body = null, System.Threading.CancellationToken cancellationToken) {

   return _implementation.CreateUsersWithArrayInputAsync(body, cancellationToken);
  }

  /// <summary>
  /// Creates list of users with given input array
  /// </summary>
  /// <returns>successful operation</returns>
  [Microsoft.AspNetCore.Mvc.HttpPost, Microsoft.AspNetCore.Mvc.Route("user/createWithList")]
  public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> CreateUsersWithListInput([Microsoft.AspNetCore.Mvc.FromBody] object? body = null, System.Threading.CancellationToken cancellationToken) {

   return _implementation.CreateUsersWithListInputAsync(body, cancellationToken);
  }

  /// <summary>
  /// Logs user into the system
  /// </summary>
  /// <param name="username">The user name for login</param>
  /// <param name="password">The password for login in clear text</param>
  /// <returns>successful operation</returns>
  [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("user/login")]
  public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.ActionResult<string>> LoginUser([Microsoft.AspNetCore.Mvc.FromQuery][Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string username, [Microsoft.AspNetCore.Mvc.FromQuery][Microsoft.AspNetCore.Mvc.ModelBinding.BindRequired] string password, System.Threading.CancellationToken cancellationToken) {

   return _implementation.LoginUserAsync(username, password, cancellationToken);
  }

  /// <summary>
  /// Logs out current logged in user session
  /// </summary>
  /// <returns>successful operation</returns>
  [Microsoft.AspNetCore.Mvc.HttpGet, Microsoft.AspNetCore.Mvc.Route("user/logout")]
  public System.Threading.Tasks.Task<Microsoft.AspNetCore.Mvc.IActionResult> LogoutUser(System.Threading.CancellationToken cancellationToken) {

   return _implementation.LogoutUserAsync(cancellationToken);
  }

 }

 [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 public partial class ApiResponse {
  [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  public int? Code { get; set; } = default!;

  [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  public string? Type { get; set; } = default!;

  [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  public string? Message { get; set; } = default!;

  private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

  [Newtonsoft.Json.JsonExtensionData]
  public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
   get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
   set { _additionalProperties = value; }
  }

 }

 /// <summary>
 /// A representation of a cat
 /// </summary>
 [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 public partial class Cat : Pet {
  /// <summary>
  /// The measured skill for hunting
  /// </summary>
  [Newtonsoft.Json.JsonProperty("huntingSkill", Required = Newtonsoft.Json.Required.Always)]
  [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
  [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
  public CatHuntingSkill HuntingSkill { get; set; } = PetStore.CatHuntingSkill.Lazy;

 }

 [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 public partial class Category {
  /// <summary>
  /// Category ID
  /// </summary>
  [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  public long Id { get; set; } = default!;

  /// <summary>
  /// Category name
  /// </summary>
  [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
  public string? Name { get; set; } = default!;

  /// <summary>
  /// Test Sub Category
  /// </summary>
  [Newtonsoft.Json.JsonProperty("sub", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  public Sub? Sub { get; set; } = default!;

  private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

  [Newtonsoft.Json.JsonExtensionData]
  public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
   get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
   set { _additionalProperties = value; }
  }

 }

 /// <summary>
 /// A representation of a dog
 /// </summary>
 [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 public partial class Dog : Pet {
  /// <summary>
  /// The size of the pack the dog is from
  /// </summary>
  [Newtonsoft.Json.JsonProperty("packSize", Required = Newtonsoft.Json.Required.Always)]
  [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
  public int PackSize { get; set; } = 1;

 }

 /// <summary>
 /// A representation of a honey bee
 /// </summary>
 [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 public partial class HoneyBee : Pet {
  /// <summary>
  /// Average amount of honey produced per day in ounces
  /// </summary>
  [Newtonsoft.Json.JsonProperty("honeyPerDay", Required = Newtonsoft.Json.Required.Always)]
  public double HoneyPerDay { get; set; } = default!;

 }

 [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 public partial class Order {
  /// <summary>
  /// Order ID
  /// </summary>
  [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  public long Id { get; set; } = default!;

  /// <summary>
  /// Pet ID
  /// </summary>
  [Newtonsoft.Json.JsonProperty("petId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  public long PetId { get; set; } = default!;

  [Newtonsoft.Json.JsonProperty("quantity", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  [System.ComponentModel.DataAnnotations.Range(1, int.MaxValue)]
  public int? Quantity { get; set; } = 1;

  /// <summary>
  /// Estimated ship date
  /// </summary>
  [Newtonsoft.Json.JsonProperty("shipDate", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  public System.DateTimeOffset? ShipDate { get; set; } = default!;

  /// <summary>
  /// Order Status
  /// </summary>
  [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
  public OrderStatus? Status { get; set; } = default!;

  /// <summary>
  /// Indicates whenever order was completed or not
  /// </summary>
  [Newtonsoft.Json.JsonProperty("complete", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  public bool? Complete { get; set; } = false;

  /// <summary>
  /// Unique Request Id
  /// </summary>
  [Newtonsoft.Json.JsonProperty("requestId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  public string? RequestId { get; set; } = default!;

  private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

  [Newtonsoft.Json.JsonExtensionData]
  public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
   get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
   set { _additionalProperties = value; }
  }

 }

 [Newtonsoft.Json.JsonConverter(typeof(JsonInheritanceConverter), "petType")]
 [JsonInheritanceAttribute("cat", typeof(Cat))]
 [JsonInheritanceAttribute("dog", typeof(Dog))]
 [JsonInheritanceAttribute("bee", typeof(HoneyBee))]
 [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 public partial class Pet {
  /// <summary>
  /// Pet ID
  /// </summary>
  [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  public long Id { get; set; } = default!;

  /// <summary>
  /// Categories this pet belongs to
  /// </summary>
  [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  public Category? Category { get; set; } = default!;

  /// <summary>
  /// The name given to a pet
  /// </summary>
  [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
  [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
  public string Name { get; set; } = default!;

  /// <summary>
  /// The list of URL to a cute photos featuring pet
  /// </summary>
  [Newtonsoft.Json.JsonProperty("photoUrls", Required = Newtonsoft.Json.Required.Always)]
  [System.ComponentModel.DataAnnotations.Required]
  [System.ComponentModel.DataAnnotations.MaxLength(20)]
  public System.Collections.Generic.List<string> PhotoUrls { get; set; } = new System.Collections.Generic.List<string>();

  [Newtonsoft.Json.JsonProperty("friend", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  public Pet? Friend { get; set; } = default!;

  /// <summary>
  /// Tags attached to the pet
  /// </summary>
  [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  [System.ComponentModel.DataAnnotations.MinLength(1)]
  public System.Collections.Generic.List<Tag>? Tags { get; set; } = default!;

  /// <summary>
  /// Pet status in the store
  /// </summary>
  [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
  public PetStatus? Status { get; set; } = default!;

  private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

  [Newtonsoft.Json.JsonExtensionData]
  public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
   get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
   set { _additionalProperties = value; }
  }

 }

 [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 public partial class Tag {
  /// <summary>
  /// Tag ID
  /// </summary>
  [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  public long Id { get; set; } = default!;

  /// <summary>
  /// Tag name
  /// </summary>
  [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
  public string? Name { get; set; } = default!;

  private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

  [Newtonsoft.Json.JsonExtensionData]
  public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
   get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
   set { _additionalProperties = value; }
  }

 }

 [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 public partial class User {
  [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  public long Id { get; set; } = default!;

  [Newtonsoft.Json.JsonProperty("pet", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  public Pet Pet { get; set; } = default!;

  /// <summary>
  /// User supplied username
  /// </summary>
  [Newtonsoft.Json.JsonProperty("username", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 4)]
  public string? Username { get; set; } = default!;

  /// <summary>
  /// User first name
  /// </summary>
  [Newtonsoft.Json.JsonProperty("firstName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
  public string? FirstName { get; set; } = default!;

  /// <summary>
  /// User last name
  /// </summary>
  [Newtonsoft.Json.JsonProperty("lastName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 1)]
  public string? LastName { get; set; } = default!;

  /// <summary>
  /// User email address
  /// </summary>
  [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  public string? Email { get; set; } = default!;

  /// <summary>
  /// User password, MUST contain a mix of upper and lower case letters, as well as digits
  /// </summary>
  [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue, MinimumLength = 8)]
  [System.ComponentModel.DataAnnotations.RegularExpression(@"/(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])/")]
  public string? Password { get; set; } = default!;

  /// <summary>
  /// User phone number in international format
  /// </summary>
  [Newtonsoft.Json.JsonProperty("phone", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  [System.ComponentModel.DataAnnotations.RegularExpression(@"/^\+(?:[0-9]-?){6,14}[0-9]$/")]
  public string? Phone { get; set; } = default!;

  /// <summary>
  /// User status
  /// </summary>
  [Newtonsoft.Json.JsonProperty("userStatus", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  public int? UserStatus { get; set; } = default!;

  [Newtonsoft.Json.JsonProperty("addresses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  public System.Tuple<Anonymous2, double>? Addresses { get; set; } = default!;

  private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

  [Newtonsoft.Json.JsonExtensionData]
  public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
   get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
   set { _additionalProperties = value; }
  }

 }

 [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 public partial class Body {
  /// <summary>
  /// Updated name of the pet
  /// </summary>
  [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  public string? Name { get; set; } = default!;

  /// <summary>
  /// Updated status of the pet
  /// </summary>
  [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  public string? Status { get; set; } = default!;

  private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

  [Newtonsoft.Json.JsonExtensionData]
  public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
   get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
   set { _additionalProperties = value; }
  }

 }

 [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 public enum Anonymous {

  [System.Runtime.Serialization.EnumMember(Value = @"available")]
  Available = 0,

  [System.Runtime.Serialization.EnumMember(Value = @"pending")]
  Pending = 1,

  [System.Runtime.Serialization.EnumMember(Value = @"sold")]
  Sold = 2,

 }

 [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 public partial class Body2 {
  /// <summary>
  /// This URL will be called by the server when the desired event will occur
  /// </summary>
  [Newtonsoft.Json.JsonProperty("callbackUrl", Required = Newtonsoft.Json.Required.Always)]
  [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
  public System.Uri CallbackUrl { get; set; } = default!;

  /// <summary>
  /// Event name for the subscription
  /// </summary>
  [Newtonsoft.Json.JsonProperty("eventName", Required = Newtonsoft.Json.Required.Always)]
  [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
  [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
  public Body2EventName EventName { get; set; } = default!;

  private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

  [Newtonsoft.Json.JsonExtensionData]
  public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
   get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
   set { _additionalProperties = value; }
  }

 }

 [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 public partial class Response {
  [Newtonsoft.Json.JsonProperty("subscriptionId", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  public string? SubscriptionId { get; set; } = default!;

  private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

  [Newtonsoft.Json.JsonExtensionData]
  public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
   get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
   set { _additionalProperties = value; }
  }

 }

 [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 public enum CatHuntingSkill {

  [System.Runtime.Serialization.EnumMember(Value = @"clueless")]
  Clueless = 0,

  [System.Runtime.Serialization.EnumMember(Value = @"lazy")]
  Lazy = 1,

  [System.Runtime.Serialization.EnumMember(Value = @"adventurous")]
  Adventurous = 2,

  [System.Runtime.Serialization.EnumMember(Value = @"aggressive")]
  Aggressive = 3,

 }

 [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 public partial class Sub {
  /// <summary>
  /// Dumb Property
  /// </summary>
  [Newtonsoft.Json.JsonProperty("prop1", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  public string? Prop1 { get; set; } = default!;

  private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

  [Newtonsoft.Json.JsonExtensionData]
  public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
   get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
   set { _additionalProperties = value; }
  }

 }

 [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 public enum OrderStatus {

  [System.Runtime.Serialization.EnumMember(Value = @"placed")]
  Placed = 0,

  [System.Runtime.Serialization.EnumMember(Value = @"approved")]
  Approved = 1,

  [System.Runtime.Serialization.EnumMember(Value = @"delivered")]
  Delivered = 2,

 }

 [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 public enum PetStatus {

  [System.Runtime.Serialization.EnumMember(Value = @"available")]
  Available = 0,

  [System.Runtime.Serialization.EnumMember(Value = @"pending")]
  Pending = 1,

  [System.Runtime.Serialization.EnumMember(Value = @"sold")]
  Sold = 2,

 }

 [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 public partial class Anonymous2 {
  [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue)]
  public string? City { get; set; } = default!;

  [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue)]
  public string? Country { get; set; } = default!;

  /// <summary>
  /// includes build/apartment number
  /// </summary>
  [Newtonsoft.Json.JsonProperty("street", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
  [System.ComponentModel.DataAnnotations.StringLength(int.MaxValue)]
  public string? Street { get; set; } = default!;

  private System.Collections.Generic.IDictionary<string, object>? _additionalProperties;

  [Newtonsoft.Json.JsonExtensionData]
  public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
   get { return _additionalProperties ?? (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>()); }
   set { _additionalProperties = value; }
  }

 }

 [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 public enum Body2EventName {

  [System.Runtime.Serialization.EnumMember(Value = @"orderInProgress")]
  OrderInProgress = 0,

  [System.Runtime.Serialization.EnumMember(Value = @"orderShipped")]
  OrderShipped = 1,

  [System.Runtime.Serialization.EnumMember(Value = @"orderDelivered")]
  OrderDelivered = 2,

 }

 [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 [System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface, AllowMultiple = true)]
 internal class JsonInheritanceAttribute : System.Attribute {
  public JsonInheritanceAttribute(string key, System.Type type) {
   Key = key;
   Type = type;
  }

  public string Key { get; }

  public System.Type Type { get; }
 }

 [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 public class JsonInheritanceConverter : Newtonsoft.Json.JsonConverter {
  internal static readonly string DefaultDiscriminatorName = "discriminator";

  private readonly string _discriminatorName;

  [System.ThreadStatic]
  private static bool _isReading;

  [System.ThreadStatic]
  private static bool _isWriting;

  public JsonInheritanceConverter() {
   _discriminatorName = DefaultDiscriminatorName;
  }

  public JsonInheritanceConverter(string discriminatorName) {
   _discriminatorName = discriminatorName;
  }

  public string DiscriminatorName { get { return _discriminatorName; } }

  public override void WriteJson(Newtonsoft.Json.JsonWriter writer, object value, Newtonsoft.Json.JsonSerializer serializer) {
   try {
    _isWriting = true;

    var jObject = Newtonsoft.Json.Linq.JObject.FromObject(value, serializer);
    jObject.AddFirst(new Newtonsoft.Json.Linq.JProperty(_discriminatorName, GetSubtypeDiscriminator(value.GetType())));
    writer.WriteToken(jObject.CreateReader());
   } finally {
    _isWriting = false;
   }
  }

  public override bool CanWrite {
   get {
    if (_isWriting) {
     _isWriting = false;
     return false;
    }
    return true;
   }
  }

  public override bool CanRead {
   get {
    if (_isReading) {
     _isReading = false;
     return false;
    }
    return true;
   }
  }

  public override bool CanConvert(System.Type objectType) {
   return true;
  }

  public override object ReadJson(Newtonsoft.Json.JsonReader reader, System.Type objectType, object existingValue, Newtonsoft.Json.JsonSerializer serializer) {
   var jObject = serializer.Deserialize<Newtonsoft.Json.Linq.JObject>(reader);
   if (jObject == null)
    return null;

   var discriminatorValue = jObject.GetValue(_discriminatorName);
   var discriminator = discriminatorValue != null ? Newtonsoft.Json.Linq.Extensions.Value<string>(discriminatorValue) : null;
   var subtype = GetObjectSubtype(objectType, discriminator);

   var objectContract = serializer.ContractResolver.ResolveContract(subtype) as Newtonsoft.Json.Serialization.JsonObjectContract;
   if (objectContract == null || System.Linq.Enumerable.All(objectContract.Properties, p => p.PropertyName != _discriminatorName)) {
    jObject.Remove(_discriminatorName);
   }

   try {
    _isReading = true;
    return serializer.Deserialize(jObject.CreateReader(), subtype);
   } finally {
    _isReading = false;
   }
  }

  private System.Type GetObjectSubtype(System.Type objectType, string discriminator) {
   foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true)) {
    if (attribute.Key == discriminator)
     return attribute.Type;
   }

   return objectType;
  }

  private string GetSubtypeDiscriminator(System.Type objectType) {
   foreach (var attribute in System.Reflection.CustomAttributeExtensions.GetCustomAttributes<JsonInheritanceAttribute>(System.Reflection.IntrospectionExtensions.GetTypeInfo(objectType), true)) {
    if (attribute.Type == objectType)
     return attribute.Key;
   }

   return objectType.Name;
  }
 }

 [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v13.0.0.0))")]
 public partial class FileParameter {
  public FileParameter(System.IO.Stream data)
      : this(data, null, null) {
  }

  public FileParameter(System.IO.Stream data, string? fileName)
      : this(data, fileName, null) {
  }

  public FileParameter(System.IO.Stream data, string? fileName, string? contentType) {
   Data = data;
   FileName = fileName;
   ContentType = contentType;
  }

  public System.IO.Stream Data { get; private set; }

  public string? FileName { get; private set; }

  public string? ContentType { get; private set; }
 }


}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore 472
#pragma warning restore 114
#pragma warning restore 108
#pragma warning restore 3016
#pragma warning restore 8603